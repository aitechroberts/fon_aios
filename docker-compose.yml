services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow_password
      POSTGRES_DB: airflow_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - fon_aios_network

  neo4j:
    image: neo4j:5.15-community
    environment:
      NEO4J_AUTH: neo4j/password123
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_default_listen_address: 0.0.0.0
      NEO4J_dbms_connector_bolt_listen_address: 0.0.0.0:7687
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./neo4j/import:/var/lib/neo4j/import
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - fon_aios_network

  nifi:
    image: apache/nifi:1.24.0
    environment:
      NIFI_WEB_HTTP_HOST: 0.0.0.0
      NIFI_WEB_HTTP_PORT: 8443
      NIFI_CLUSTER_IS_NODE: false
      NIFI_ZK_CONNECT_STRING: ''
      NIFI_ELECTION_MAX_WAIT: '30 sec'
      NIFI_SENSITIVE_PROPS_KEY: 'changemechanmeme'
      SINGLE_USER_CREDENTIALS_USERNAME: admin
      SINGLE_USER_CREDENTIALS_PASSWORD: ctsBtRBKHRAx69EqUghvvgEvjnaLjFEB
    ports:
      - "8443:8443"
    volumes:
      - nifi_conf:/opt/nifi/nifi-current/conf
      - nifi_content_repository:/opt/nifi/nifi-current/content_repository
      - nifi_database_repository:/opt/nifi/nifi-current/database_repository
      - nifi_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - nifi_state:/opt/nifi/nifi-current/state
      - nifi_logs:/opt/nifi/nifi-current/logs
      - ./data:/opt/nifi/data
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/nifi/"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 120s
    depends_on:
      - postgres
    networks:
      - fon_aios_network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fon_aios_network

  # FIXED: Airflow 3.0.3 initialization - just database migration
  airflow-init:
    build: .
    environment:
      # SimpleAuthManager user configuration (Airflow 3.0.3 default)
      AIRFLOW__CORE__AUTH_MANAGER: 'airflow.auth.managers.simple.simple_auth_manager.SimpleAuthManager'
      AIRFLOW__CORE__SIMPLE_AUTH_MANAGER_USERS: 'admin:admin,analyst:user'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./dbt_project:/opt/dbt_project
      - ./data:/opt/data
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fon_aios_network
    # FIXED: Only database migration for Airflow 3.0.3
    command: ["airflow", "db", "migrate"]

  # FIXED: Changed from 'webserver' to 'api-server' for Airflow 3.0.3
  airflow-api-server:
    build: .
    command: ["airflow", "api-server"]
    ports:
      - "8080:8080"
    environment:
      # SimpleAuthManager configuration
      AIRFLOW__CORE__AUTH_MANAGER: 'airflow.auth.managers.simple.simple_auth_manager.SimpleAuthManager'
      AIRFLOW__CORE__SIMPLE_AUTH_MANAGER_USERS: 'admin:admin,analyst:user'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./dbt_project:/opt/dbt_project
      - ./data:/opt/data
    env_file:
      - .env
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - fon_aios_network

  # NEW: Required dag-processor service for Airflow 3.0.3
  airflow-dag-processor:
    build: .
    command: ["airflow", "dag-processor"]
    environment:
      AIRFLOW__CORE__AUTH_MANAGER: 'airflow.auth.managers.simple.simple_auth_manager.SimpleAuthManager'
      AIRFLOW__CORE__SIMPLE_AUTH_MANAGER_USERS: 'admin:admin,analyst:user'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./dbt_project:/opt/dbt_project
      - ./data:/opt/data
    env_file:
      - .env
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - fon_aios_network

  airflow-scheduler:
    build: .
    command: ["airflow", "scheduler"]
    environment:
      AIRFLOW__CORE__AUTH_MANAGER: 'airflow.auth.managers.simple.simple_auth_manager.SimpleAuthManager'
      AIRFLOW__CORE__SIMPLE_AUTH_MANAGER_USERS: 'admin:admin,analyst:user'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./dbt_project:/opt/dbt_project
      - ./data:/opt/data
    env_file:
      - .env
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - fon_aios_network

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  nifi_conf:
  nifi_content_repository:
  nifi_database_repository:
  nifi_flowfile_repository:
  nifi_provenance_repository:
  nifi_state:
  nifi_logs:
  redis_data:

networks:
  fon_aios_network:
    driver: bridge